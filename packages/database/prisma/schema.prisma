generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menus     Menu[]
  hours     OperatingHours[]
  contacts  Contact[]
  images    Image[]

  @@map("restaurants")
}

model Menu {
  id           String   @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  sortOrder    Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  sections   MenuSection[]

  @@map("menus")
}

model MenuSection {
  id          String   @id @default(cuid())
  menuId      String
  name        String
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menu  Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items MenuItem[]

  @@map("menu_sections")
}

model MenuItem {
  id          String   @id @default(cuid())
  sectionId   String
  name        String
  description String?
  price       Float?
  sortOrder   Int      @default(0)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section MenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model OperatingHours {
  id           String   @id @default(cuid())
  restaurantId String
  dayOfWeek    Int      // 0 = Sunday, 6 = Saturday
  openTime     String   // Format: "HH:MM"
  closeTime    String   // Format: "HH:MM"
  isClosed     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, dayOfWeek])
  @@map("operating_hours")
}

model Contact {
  id           String   @id @default(cuid())
  restaurantId String
  type         String   // phone, email, address, social
  label        String?
  value        String
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Image {
  id           String   @id @default(cuid())
  restaurantId String
  url          String
  alt          String?
  category     String?  // hero, gallery, menu, etc.
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("images")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  passwordHash     String
  role             UserRole  @default(VIEWER)
  isActive         Boolean   @default(true)
  emailVerified    DateTime?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  sessions  Session[]
  auditLogs AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expires      DateTime
  lastActivity DateTime @default(now())
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}