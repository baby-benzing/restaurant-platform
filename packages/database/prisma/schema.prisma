generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menus     Menu[]
  hours     OperatingHours[]
  contacts  Contact[]
  images    Image[]
  wines     Wine[]
  wineCategories WineCategory[]
  wineImports WineImport[]
  cateringInquiries CateringInquiry[]
  notificationSettings NotificationSettings?

  @@map("restaurants")
}

model Menu {
  id           String   @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  sortOrder    Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  sections   MenuSection[]

  @@map("menus")
}

model MenuSection {
  id          String   @id @default(cuid())
  menuId      String
  name        String
  description String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menu  Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items MenuItem[]

  @@map("menu_sections")
}

model MenuItem {
  id          String   @id @default(cuid())
  sectionId   String
  name        String
  description String?
  price       Float?
  sortOrder   Int      @default(0)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section MenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model OperatingHours {
  id           String   @id @default(cuid())
  restaurantId String
  dayOfWeek    Int      // 0 = Sunday, 6 = Saturday
  openTime     String   // Format: "HH:MM"
  closeTime    String   // Format: "HH:MM"
  isClosed     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, dayOfWeek])
  @@map("operating_hours")
}

model Contact {
  id           String   @id @default(cuid())
  restaurantId String
  type         String   // phone, email, address, social
  label        String?
  value        String
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Image {
  id           String   @id @default(cuid())
  restaurantId String
  url          String
  alt          String?
  category     String?  // hero, gallery, menu, etc.
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("images")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  passwordHash     String
  role             UserRole  @default(VIEWER)
  isActive         Boolean   @default(true)
  emailVerified    DateTime?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  sessions  Session[]
  auditLogs AuditLog[]
  wineUpdates WineUpdate[]
  wineImports WineImport[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expires      DateTime
  lastActivity DateTime @default(now())
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@map("audit_logs")
}// Wine List Management Models

model Wine {
  id              String    @id @default(cuid())
  restaurantId    String
  name            String
  producer        String?
  vintage         Int?
  region          String?
  country         String?
  grapeVarieties  String[]
  type            WineType
  price           Decimal?  @db.Decimal(10, 2)
  glassPrice      Decimal?  @db.Decimal(10, 2)
  bottlePrice     Decimal?  @db.Decimal(10, 2)
  tastingNotes    String?   @db.Text
  foodPairings    String[]
  inventoryStatus WineInventoryStatus @default(IN_STOCK)
  displayOrder    Int       @default(999)
  isActive        Boolean   @default(true)
  featured        Boolean   @default(false)
  imageUrl        String?
  
  // Metadata
  importedFrom    String?   // Track source file
  importedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  updates         WineUpdate[]
  analytics       WineAnalytics[]
  
  @@index([restaurantId, type, isActive])
  @@index([restaurantId, featured])
  @@map("wines")
}

model WineCategory {
  id            String    @id @default(cuid())
  restaurantId  String
  name          String
  description   String?
  displayOrder  Int       @default(999)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@unique([restaurantId, name])
  @@map("wine_categories")
}

model WineUpdate {
  id            String    @id @default(cuid())
  wineId        String
  userId        String?
  updateType    WineUpdateType
  oldData       Json?
  newData       Json?
  notes         String?
  createdAt     DateTime  @default(now())
  
  wine          Wine      @relation(fields: [wineId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([wineId])
  @@map("wine_updates")
}

model WineAnalytics {
  id            String    @id @default(cuid())
  wineId        String
  eventType     WineEventType
  sessionId     String?
  userId        String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  wine          Wine      @relation(fields: [wineId], references: [id], onDelete: Cascade)
  
  @@index([wineId, eventType])
  @@index([createdAt])
  @@map("wine_analytics")
}

model WineImport {
  id            String    @id @default(cuid())
  restaurantId  String
  fileName      String
  fileSize      Int?
  status        ImportStatus
  totalRows     Int?
  successCount  Int?
  errorCount    Int?
  errors        Json?
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  userId        String?
  
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([restaurantId, status])
  @@map("wine_imports")
}

enum WineType {
  RED
  WHITE
  ROSE
  SPARKLING
  DESSERT
  FORTIFIED
  OTHER
}

enum WineInventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  COMING_SOON
  SEASONAL
}

enum WineUpdateType {
  CREATE
  UPDATE
  DELETE
  PRICE_CHANGE
  INVENTORY_CHANGE
  IMPORT
}

enum WineEventType {
  VIEW
  SEARCH
  FILTER
  CLICK
  SHARE
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model CateringInquiry {
  id           String   @id @default(cuid())
  restaurantId String
  
  // Contact Information
  name         String
  email        String
  phone        String
  company      String?
  
  // Event Details
  eventDate    DateTime
  eventTime    String   // Morning/Afternoon/Evening
  eventType    String?  // Corporate/Wedding/Private Party/etc
  guestCount   Int
  
  // Location
  venue        String?
  address      String
  deliveryType String   // Pickup/Delivery
  
  // Requirements
  message      String   @db.Text
  budget       String?  // Budget range
  
  // Status
  status       CateringStatus @default(NEW)
  notes        String?  @db.Text // Internal notes
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  respondedAt  DateTime?
  
  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@index([restaurantId, status])
  @@index([createdAt])
  @@map("catering_inquiries")
}

enum CateringStatus {
  NEW
  CONTACTED
  QUOTED
  CONFIRMED
  COMPLETED
  CANCELLED
}

model NotificationSettings {
  id           String   @id @default(cuid())
  restaurantId String   @unique
  
  // Email Notifications
  emailEnabled Boolean  @default(true)
  emailAddresses String[] // Array of email addresses to notify
  
  // SMS Notifications
  smsEnabled   Boolean  @default(false)
  phoneNumbers String[] // Array of phone numbers to notify
  
  // Notification Types
  notifyCatering Boolean @default(true)
  notifyContact  Boolean @default(true)
  notifyOrders   Boolean @default(false)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@map("notification_settings")
}